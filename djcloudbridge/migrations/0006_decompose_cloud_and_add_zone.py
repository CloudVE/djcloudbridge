# Generated by Django 2.1.1 on 2019-02-28 11:41
from django.db import migrations, models
from django.template.defaultfilters import slugify
import django.db.models.deletion


def copy_cloud_data(apps, schema_editor):
    oldCloud = apps.get_model('djcloudbridge', 'CloudOld')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    newAWS = apps.get_model('djcloudbridge', 'AWSCloud')
    newAzure = apps.get_model('djcloudbridge', 'AzureCloud')
    newGCP = apps.get_model('djcloudbridge', 'GCPCloud')
    newOpenStack = apps.get_model('djcloudbridge', 'OpenStackCloud')
    newAWSRegion = apps.get_model('djcloudbridge', 'AWSRegion')
    newAzureRegion = apps.get_model('djcloudbridge', 'AzureRegion')
    newGCPRegion = apps.get_model('djcloudbridge', 'GCPRegion')
    newOpenStackRegion = apps.get_model('djcloudbridge', 'OpenStackRegion')
    newZone = apps.get_model('djcloudbridge', 'Zone')

    for cloud in oldCloud.objects.all():
        if hasattr(cloud, 'aws'):
            new_ct = ContentType.objects.get_for_model(newAWS)
            newObj = newAWS.objects.create(
                polymorphic_ctype=new_ct,
                id=cloud.slug,
                name=cloud.name,
                access_instructions_url=cloud.access_instructions_url)
            new_ct = ContentType.objects.get_for_model(newAWSRegion)
            newRegion = newAWSRegion.objects.create(
                polymorphic_ctype=new_ct,
                region_id=slugify(cloud.aws.region_name),
                name=cloud.aws.region_name,
                cloud=newObj,
                ec2_endpoint_url=cloud.aws.ec2_endpoint_url,
                ec2_is_secure=cloud.aws.ec2_is_secure,
                ec2_validate_certs=cloud.aws.ec2_validate_certs,
                s3_endpoint_url=cloud.aws.s3_endpoint_url,
                s3_is_secure=cloud.aws.s3_is_secure,
                s3_validate_certs=cloud.aws.s3_validate_certs)
            newZone.objects.create(zone_id="default", region=newRegion)
        elif hasattr(cloud, 'azure'):
            new_ct = ContentType.objects.get_for_model(newAzure)
            newObj = newAzure.objects.create(
                polymorphic_ctype=new_ct,
                id=cloud.slug,
                name=cloud.name,
                access_instructions_url=cloud.access_instructions_url)
            new_ct = ContentType.objects.get_for_model(newAzureRegion)
            newRegion = newAzureRegion.objects.create(
                polymorphic_ctype=new_ct,
                region_id=slugify(cloud.azure.region_name),
                name=cloud.azure.region_name,
                cloud=newObj)
            newZone.objects.create(zone_id="default", region=newRegion)
        elif hasattr(cloud, 'gcp'):
            new_ct = ContentType.objects.get_for_model(newGCP)
            newObj = newGCP.objects.create(
                polymorphic_ctype=new_ct,
                id=cloud.slug,
                name=cloud.name,
                access_instructions_url=cloud.access_instructions_url)
            new_ct = ContentType.objects.get_for_model(newGCPRegion)
            newRegion = newGCPRegion.objects.create(
                polymorphic_ctype=new_ct,
                region_id=slugify(cloud.gcp.region_name),
                name=cloud.gcp.region_name,
                cloud=newObj)
            newZone.objects.create(zone_id="default", region=newRegion)
        elif hasattr(cloud, 'openstack'):
            new_ct = ContentType.objects.get_for_model(newOpenStack)
            newObj = newOpenStack.objects.create(
                polymorphic_ctype=new_ct,
                id=cloud.slug,
                name=cloud.name,
                access_instructions_url=cloud.access_instructions_url,
                auth_url=cloud.openstack.auth_url,
                identity_api_version=cloud.openstack.identity_api_version)
            new_ct = ContentType.objects.get_for_model(newOpenStackRegion)
            newRegion = newOpenStackRegion.objects.create(
                polymorphic_ctype=new_ct,
                region_id=slugify(cloud.openstack.region_name),
                name=cloud.openstack.region_name,
                cloud=newObj)
            newZone.objects.create(zone_id="default", region=newRegion)


def update_credentials_data(apps, schema_editor):
    Credentials = apps.get_model('djcloudbridge', 'Credentials')
    CloudCredentials = apps.get_model('djcloudbridge', 'CloudCredentials')

    for creds in Credentials.objects.all():
        CloudCredentials.objects.create(credentials_ptr=creds,
                                        default=creds.default,
                                        cloud_id=creds.cloud.pk)


def update_credentials_inheritance(apps, schema_editor):
    AWSCreds = apps.get_model('djcloudbridge', 'AWSCredentials')
    update_ctype_for_model(apps, AWSCreds)
    AzureCreds = apps.get_model('djcloudbridge', 'AzureCredentials')
    update_ctype_for_model(apps, AzureCreds)
    GCPCreds = apps.get_model('djcloudbridge', 'GCPCredentials')
    update_ctype_for_model(apps, GCPCreds)
    OpenStackCreds = apps.get_model('djcloudbridge', 'OpenStackCredentials')
    update_ctype_for_model(apps, OpenStackCreds)
    # Delete any hanging objects - for some reason we have a few
    CloudCredentials = apps.get_model('djcloudbridge', 'CloudCredentials')
    CloudCredentials.objects.filter(polymorphic_ctype__isnull=True).delete()


def update_ctype_for_model(apps, model):
    ContentType = apps.get_model('contenttypes', 'ContentType')
    new_ct = ContentType.objects.get_for_model(model)
    model.objects.filter(polymorphic_ctype__isnull=True).update(polymorphic_ctype=new_ct)


# ref: https://code.djangoproject.com/ticket/26488
class RenameModelAndBaseOperation(migrations.RenameModel):

    def __init__(self, old_name, new_name):
        super(RenameModelAndBaseOperation, self).__init__(old_name, new_name)

    def state_forwards(self, app_label, state):
        old_remote_model = '%s.%s' % (app_label, self.old_name_lower)
        new_remote_model = '%s.%s' % (app_label, self.new_name_lower)
        to_reload = []
        # change all bases affected by rename
        for (model_app_label, model_name), model_state in state.models.items():
            if old_remote_model in model_state.bases:
                new_bases_tuple = tuple(
                    new_remote_model if base == old_remote_model
                    else base
                    for base in model_state.bases)
                state.models[model_app_label, model_name].bases = new_bases_tuple
                to_reload.append((model_app_label, model_name))
        super(RenameModelAndBaseOperation, self).state_forwards(app_label, state)
        state.reload_models(to_reload, delay=True)


class AlterBaseOperation(migrations.operations.base.Operation):
    reduce_to_sql = False
    reversible = True

    def __init__(self, model_name, bases, prev_bases):
        self.model_name = model_name
        self.bases = bases
        self.prev_bases = prev_bases

    def state_forwards(self, app_label, state):
        state.models[app_label, self.model_name].bases = self.bases
        state.reload_model(app_label, self.model_name)

    def state_backwards(self, app_label, state):
        state.models[app_label, self.model_name].bases = self.prev_bases
        state.reload_model(app_label, self.model_name)

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        pass

    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        pass

    def describe(self):
        return "Update %s bases to %s" % (self.model_name, self.bases)


# Ref: https://oktomus.com/blog/migrate-models-when-adding-inheritance-django
# https://www.kidstrythisathome.com/2016/10/wtf-django-moving-models-part1.html
class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('djcloudbridge', '0005_gcp_rename'),
    ]

    operations = [
        RenameModelAndBaseOperation(
            old_name='Cloud',
            new_name='CloudOld',
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone_id', models.SlugField(verbose_name='Zone id')),
                ('name', models.CharField(max_length=60, verbose_name='Zone name', blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_id', models.SlugField(verbose_name='Region id', help_text='This is the id for the region and is used in the ReST url.')),
                ('name', models.CharField(max_length=60, verbose_name='Region name', help_text='This is the name of the region as understood by the cloud provider and is required. e.g. us-east-1')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AWSRegion',
            fields=[
                ('region_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='djcloudbridge.Region')),
                ('ec2_endpoint_url', models.CharField(max_length=255, verbose_name='EC2 endpoint url', blank=True, null=True, help_text='This field should be left blank unless using a custom endpoint for an AWS compatible cloud.')),
                ('ec2_is_secure', models.BooleanField(default=True, verbose_name='EC2 is secure')),
                ('ec2_validate_certs', models.BooleanField(default=True, verbose_name='EC2 validate certificates')),
                ('s3_endpoint_url', models.CharField(max_length=255, verbose_name='S3 endpoint url', blank=True, null=True)),
                ('s3_is_secure', models.BooleanField(default=True, verbose_name='S3 is secure')),
                ('s3_validate_certs', models.BooleanField(default=True, verbose_name='S3 validate certificates')),
            ],
            options={
                'verbose_name': 'AWS Region',
                'verbose_name_plural': 'AWS Regions',
            },
            bases=('djcloudbridge.region',),
        ),
        migrations.CreateModel(
            name='AzureRegion',
            fields=[
                ('region_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='djcloudbridge.Region')),
            ],
            options={
                'verbose_name': 'Azure',
                'verbose_name_plural': 'Azure',
            },
            bases=('djcloudbridge.region',),
        ),
        migrations.CreateModel(
            name='Cloud',
            fields=[
                ('id', models.SlugField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('access_instructions_url', models.URLField(blank=True, max_length=2048, null=True)),
            ],
            options={'ordering': ['name'], 'verbose_name': 'Cloud', 'verbose_name_plural': 'Clouds'},
        ),
        migrations.CreateModel(
            name='GCPRegion',
            fields=[
                ('region_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='djcloudbridge.Region')),
            ],
            options={
                'verbose_name': 'GCP',
                'verbose_name_plural': 'GCP',
            },
            bases=('djcloudbridge.region',),
        ),
        migrations.CreateModel(
            name='OpenStackRegion',
            fields=[
                ('region_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='djcloudbridge.Region')),
            ],
            options={
                'verbose_name': 'OpenStack Region',
                'verbose_name_plural': 'OpenStack Regions',
            },
            bases=('djcloudbridge.region',),
        ),
        migrations.AddField(
            model_name='cloud',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='polymorphic_djcloudbridge.cloud_set+',
                                    to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='region',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='polymorphic_djcloudbridge.region_set+',
                                    to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='zone',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zones',
                                    to='djcloudbridge.Region'),
        ),
        migrations.CreateModel(
            name='AWSCloud',
            fields=[
                ('cloud_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='djcloudbridge.Cloud')),
            ],
            options={
                'verbose_name': 'Amazon Web Services',
                'verbose_name_plural': 'Amazon Web Services',
            },
            bases=('djcloudbridge.cloud',),
        ),
        migrations.CreateModel(
            name='AzureCloud',
            fields=[
                ('cloud_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='djcloudbridge.Cloud')),
            ],
            options={
                'verbose_name': 'Azure',
                'verbose_name_plural': 'Azure',
            },
            bases=('djcloudbridge.cloud',),
        ),
        migrations.CreateModel(
            name='GCPCloud',
            fields=[
                ('cloud_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='djcloudbridge.Cloud')),
            ],
            options={
                'verbose_name': 'Google Cloud Platform',
                'verbose_name_plural': 'Google Cloud Platform',
            },
            bases=('djcloudbridge.cloud',),
        ),
        migrations.CreateModel(
            name='OpenStackCloud',
            fields=[
                ('cloud_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='djcloudbridge.Cloud')),
                ('auth_url', models.CharField(max_length=255)),
                ('identity_api_version',
                 models.CharField(blank=True, choices=[('v2.0', 'v2.0'), ('v3.0', 'v3.0')], max_length=10, null=True)),
            ],
            options={
                'verbose_name': 'OpenStack',
                'verbose_name_plural': 'OpenStack',
            },
            bases=('djcloudbridge.cloud',),
        ),
        migrations.AddField(
            model_name='region',
            name='cloud',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions',
                                    to='djcloudbridge.Cloud'),
        ),
        migrations.AddField(
            model_name='credentials',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='polymorphic_djcloudbridge.credentials_set+',
                                    to='contenttypes.ContentType'),
        ),
        migrations.AlterModelOptions(
            name='credentials',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterUniqueTogether(
            name='region',
            unique_together={('cloud', 'region_id')},
        ),
        migrations.AlterUniqueTogether(
            name='zone',
            unique_together={('region', 'zone_id')},
        ),
        migrations.RunPython(copy_cloud_data),
        migrations.CreateModel(
            name='CloudCredentials',
            fields=[
                ('credentials_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='djcloudbridge.Credentials')),
                ('default', models.BooleanField(blank=True, default=False,
                                                help_text='If set, use as default credentials for the selected cloud')),
                ('cloud', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credentials',
                                            to='djcloudbridge.Cloud')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            # bases=('djcloudbridge.credentials',),
        ),
        migrations.RunPython(update_credentials_data),
        migrations.RemoveField(
            model_name='credentials',
            name='cloud',
        ),
        migrations.RemoveField(
            model_name='credentials',
            name='default',
        ),
        AlterBaseOperation(
            model_name='cloudcredentials',
            bases=('djcloudbridge.credentials',),
            prev_bases=tuple()
        ),
        migrations.AddField(
            model_name='awscredentials',
            name='cloudcredentials_ptr',
            field=models.OneToOneField(auto_created=False, null=True,
                                       on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                       primary_key=False, serialize=False, to='djcloudbridge.CloudCredentials'),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="UPDATE djcloudbridge_awscredentials SET cloudcredentials_ptr_id = credentials_ptr_id;",
            reverse_sql="UPDATE djcloudbridge_awscredentials SET credentials_ptr_id = cloudcredentials_ptr_id;",
        ),
        migrations.RemoveField(
            model_name='awscredentials',
            name='credentials_ptr',
        ),
        AlterBaseOperation(
            model_name='awscredentials',
            bases=('djcloudbridge.cloudcredentials',),
            prev_bases=tuple()
        ),
        migrations.AlterField(
            model_name='awscredentials',
            name='cloudcredentials_ptr',
            field=models.OneToOneField(auto_created=True, null=False,
                                       on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                       primary_key=True, serialize=False, to='djcloudbridge.CloudCredentials'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='azurecredentials',
            name='cloudcredentials_ptr',
            field=models.OneToOneField(auto_created=False, null=True,
                                       on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                       primary_key=False, serialize=False, to='djcloudbridge.CloudCredentials'),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="UPDATE djcloudbridge_azurecredentials SET cloudcredentials_ptr_id = credentials_ptr_id;",
            reverse_sql="UPDATE djcloudbridge_azurecredentials SET credentials_ptr_id = cloudcredentials_ptr_id;",
        ),
        migrations.RemoveField(
            model_name='azurecredentials',
            name='credentials_ptr',
        ),
        AlterBaseOperation(
            model_name='azurecredentials',
            bases=('djcloudbridge.cloudcredentials',),
            prev_bases=tuple()
        ),
        migrations.AlterField(
            model_name='azurecredentials',
            name='cloudcredentials_ptr',
            field=models.OneToOneField(auto_created=True, null=False,
                                       on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                       primary_key=True, serialize=False, to='djcloudbridge.CloudCredentials'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='gcpcredentials',
            name='cloudcredentials_ptr',
            field=models.OneToOneField(auto_created=False, null=True,
                                       on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                       primary_key=False, serialize=False, to='djcloudbridge.CloudCredentials'),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="UPDATE djcloudbridge_gcpcredentials SET cloudcredentials_ptr_id = credentials_ptr_id;",
            reverse_sql="UPDATE djcloudbridge_gcpcredentials SET credentials_ptr_id = cloudcredentials_ptr_id;"
        ),
        migrations.RemoveField(
            model_name='gcpcredentials',
            name='credentials_ptr',
        ),
        AlterBaseOperation(
            model_name='gcpcredentials',
            bases=('djcloudbridge.cloudcredentials',),
            prev_bases=tuple()
        ),
        migrations.AlterField(
            model_name='gcpcredentials',
            name='cloudcredentials_ptr',
            field=models.OneToOneField(auto_created=True,
                                       on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                       primary_key=True, serialize=False, to='djcloudbridge.CloudCredentials'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='openstackcredentials',
            name='cloudcredentials_ptr',
            field=models.OneToOneField(auto_created=False, null=True,
                                       on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                       primary_key=False, serialize=False, to='djcloudbridge.CloudCredentials'),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="UPDATE djcloudbridge_openstackcredentials SET cloudcredentials_ptr_id = credentials_ptr_id;",
            reverse_sql="UPDATE djcloudbridge_openstackcredentials SET credentials_ptr_id = cloudcredentials_ptr_id;"
        ),
        migrations.RemoveField(
            model_name='openstackcredentials',
            name='credentials_ptr',
        ),
        AlterBaseOperation(
            model_name='openstackcredentials',
            bases=('djcloudbridge.cloudcredentials',),
            prev_bases=tuple()
        ),
        migrations.AlterField(
            model_name='openstackcredentials',
            name='cloudcredentials_ptr',
            field=models.OneToOneField(auto_created=True,
                                       on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                       primary_key=True, serialize=False, to='djcloudbridge.CloudCredentials'),
            preserve_default=False,
        ),
        migrations.RunPython(update_credentials_inheritance),
        migrations.DeleteModel(
            name='AWS',
        ),
        migrations.DeleteModel(
            name='Azure',
        ),
        migrations.DeleteModel(
            name='GCP',
        ),
        migrations.DeleteModel(
            name='OpenStack',
        ),
        # migrations.DeleteModel(
        #     name='CloudOld',
        # ),
    ]
